<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32G031_PRO\STM32G031_PRO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32G031_PRO\STM32G031_PRO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Mar 22 17:25:06 2022
<BR><P>
<H3>Maximum Stack Usage =        388 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; APP_PollingTask &rArr; Usart1_RxHandle &rArr; circ_usart1_rx_data_handle &rArr; read_data_from_circ_buf &rArr; ReadDataFromCircBuf2 &rArr; ReadDataFromCircBuf &rArr; GetDataFrmCircBuf &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[17]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC1_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[16]">DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[14]">DMA1_Channel1_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[11]">EXTI0_1_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[12]">EXTI2_3_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[13]">EXTI4_15_IRQHandler</a> from gpio.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from stm32g0xx_it.o(i.HardFault_Handler) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[21]">I2C1_IRQHandler</a> from iic_slave.o(i.I2C1_IRQHandler) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[22]">I2C2_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[2c]">I2C_DMAAbort</a> from stm32g0xx_hal_i2c.o(i.I2C_DMAAbort) referenced from stm32g0xx_hal_i2c.o(i.I2C_ITError)
 <LI><a href="#[2d]">I2C_Slave_ISR_IT</a> from stm32g0xx_hal_i2c.o(i.I2C_Slave_ISR_IT) referenced from stm32g0xx_hal_i2c.o(i.I2C_ITError)
 <LI><a href="#[1c]">LPTIM1_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[1d]">LPTIM2_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[27]">LPUART1_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from stm32g0xx_it.o(i.NMI_Handler) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[d]">PVD_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from stm32g0xx_it.o(i.PendSV_Handler) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[e]">RTC_TAMP_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[23]">SPI1_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[24]">SPI2_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from stm32g0xx_it.o(i.SVC_Handler) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from stm32g0xx_it.o(i.SysTick_Handler) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[29]">SystemInit</a> from system_stm32g0xx.o(i.SystemInit) referenced from startup_stm32g031xx.o(.text)
 <LI><a href="#[1e]">TIM14_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[1f]">TIM16_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[20]">TIM17_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[18]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[19]">TIM1_CC_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[1a]">TIM2_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[1b]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[2b]">UART_DMAAbortOnError</a> from stm32g0xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32g0xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[25]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[26]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_stm32g031xx.o(.text) referenced from startup_stm32g031xx.o(RESET)
 <LI><a href="#[2a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32g031xx.o(.text)
 <LI><a href="#[2e]">fputc</a> from usart.o(i.fputc) referenced from printf2.o(i.__0printf$2)
 <LI><a href="#[28]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1]">set_dcdc_current_02</a> from dcdc_pro.o(i.set_dcdc_current_02) referenced 2 times from dcdc_pro.o(.data)
 <LI><a href="#[0]">set_dcdc_data</a> from dcdc_pro.o(i.set_dcdc_data) referenced 2 times from dcdc_pro.o(.data)
 <LI><a href="#[5]">set_dcdc_input_current_0e</a> from dcdc_pro.o(i.set_dcdc_input_current_0e) referenced 2 times from dcdc_pro.o(.data)
 <LI><a href="#[3]">set_dcdc_otg_current_08</a> from dcdc_pro.o(i.set_dcdc_otg_current_08) referenced 2 times from dcdc_pro.o(.data)
 <LI><a href="#[4]">set_dcdc_otg_option3_start_35</a> from dcdc_pro.o(i.set_dcdc_otg_option3_start_35) referenced 2 times from dcdc_pro.o(.data)
 <LI><a href="#[2]">set_dcdc_otg_voltage_06</a> from dcdc_pro.o(i.set_dcdc_otg_voltage_06) referenced 2 times from dcdc_pro.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(.text)
</UL>
<P><STRONG><a name="[101]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[37]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[102]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[103]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[104]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[105]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[106]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[fa]"></a>MSR_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_application
</UL>

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g031xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isFull
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutData2CircBuf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFrmCircBuf
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cir_HandleInit
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BQ40Z50_ManuFBAccess_data
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gauge_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_GPIOSet
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_usart1_rx_data_handle
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_FullChargeCap
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_FaultHandle
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DCDCCharge
</UL>

<P><STRONG><a name="[10b]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_GaugeInfoUpdate
</UL>

<P><STRONG><a name="[10d]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[10f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[110]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[111]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>ADC_ConversionStop</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32g0xx_hal_adc.o(i.ADC_ConversionStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[3b]"></a>ADC_DeInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADC_DeInit &rArr; HAL_ADC_DeInit &rArr; HAL_ADC_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_application
</UL>

<P><STRONG><a name="[3e]"></a>ADC_Disable</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32g0xx_hal_adc.o(i.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[40]"></a>APP_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(i.APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = APP_Init &rArr; BSP_Init &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ParamLoad
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>APP_ParamInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(i.APP_ParamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = APP_ParamInit &rArr; DCDC_Init &rArr; set_dcdc_data &rArr; I2C_Cont_Write &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gauge_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cir_HandleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[43]"></a>APP_ParamLoad</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(i.APP_ParamLoad))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[47]"></a>APP_PollingTask</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app.o(i.APP_PollingTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = APP_PollingTask &rArr; Usart1_RxHandle &rArr; circ_usart1_rx_data_handle &rArr; read_data_from_circ_buf &rArr; ReadDataFromCircBuf2 &rArr; ReadDataFromCircBuf &rArr; GetDataFrmCircBuf &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_RxHandle
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_CommTask
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_CommTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_ProTask
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>BMS_ProTask</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bms_pro.o(i.BMS_ProTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BMS_ProTask &rArr; BMS_LowPowerMode &rArr; WakeUp_GPIOSet &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_LowPowerMode
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_GaugeInfoUpdate
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_FullChargeCap
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_FaultHandle
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_Display
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DCDCInfoUpdate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DCDCCharge
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_PollingTask
</UL>

<P><STRONG><a name="[41]"></a>BSP_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = BSP_Init &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[ec]"></a>CRC8</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, crc.o(i.CRC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_bq40z50_data
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BQ40Z50_ManuFBAccess_data
</UL>

<P><STRONG><a name="[46]"></a>Cir_HandleInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cir_handle.o(i.Cir_HandleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cir_HandleInit
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ParamInit
</UL>

<P><STRONG><a name="[49]"></a>DCDC_CommTask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dcdc_pro.o(i.DCDC_CommTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DCDC_CommTask &rArr; DCDC_FaultHandle &rArr; I2C_Cont_Write &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_UpdateData
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_FaultHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_PollingTask
</UL>

<P><STRONG><a name="[45]"></a>DCDC_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dcdc_pro.o(i.DCDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DCDC_Init &rArr; set_dcdc_data &rArr; I2C_Cont_Write &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcdc_data
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ParamInit
</UL>

<P><STRONG><a name="[13]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[48]"></a>GAUGE_CommTask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gauge_pro.o(i.GAUGE_CommTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GAUGE_CommTask &rArr; GAUGE_DataUpdate &rArr; Read_BQ40Z50_ManuFBAccess_data &rArr; SMB_HostReadByte &rArr; SMB_ACK &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Delay
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_DataUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_PollingTask
</UL>

<P><STRONG><a name="[44]"></a>Gauge_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gauge_pro.o(i.Gauge_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gauge_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ParamInit
</UL>

<P><STRONG><a name="[79]"></a>GetDataFrmCircBuf</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, circularbuf.o(i.GetDataFrmCircBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetDataFrmCircBuf &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromCircBuf
</UL>

<P><STRONG><a name="[3c]"></a>HAL_ADC_DeInit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32g0xx_hal_adc.o(i.HAL_ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_ADC_DeInit &rArr; HAL_ADC_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[7c]"></a>HAL_ADC_MspDeInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adc.o(i.HAL_ADC_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_ADC_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[b3]"></a>HAL_DMA_Abort</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, stm32g0xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32g0xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>HAL_DMA_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal_dma.o(i.HAL_DMA_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[7d]"></a>HAL_DeInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32g0xx_hal.o(i.HAL_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_application
</UL>

<P><STRONG><a name="[3d]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, stm32g0xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_DeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[80]"></a>HAL_GPIO_EXTI_Falling_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_gpio.o(i.HAL_GPIO_EXTI_Falling_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32g0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Rising_Callback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Falling_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[7f]"></a>HAL_GPIO_EXTI_Rising_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_gpio.o(i.HAL_GPIO_EXTI_Rising_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>HAL_GPIO_Init</STRONG> (Thumb, 302 bytes, Stack size 20 bytes, stm32g0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMBus_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_GPIOSet
</UL>

<P><STRONG><a name="[ee]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_Wait_Ack
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_HostReadByte
</UL>

<P><STRONG><a name="[d8]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_usart1_rx_data_handle
</UL>

<P><STRONG><a name="[3a]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[de]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32g0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[df]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32g0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_I2C_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_i2c.o(i.HAL_I2C_AbortCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TreatErrorCallback
</UL>

<P><STRONG><a name="[cf]"></a>HAL_I2C_AddrCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_i2c.o(i.HAL_I2C_AddrCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
</UL>

<P><STRONG><a name="[81]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32g0xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_DeInit
</UL>

<P><STRONG><a name="[83]"></a>HAL_I2C_ER_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32g0xx_hal_i2c.o(i.HAL_I2C_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal_i2c.o(i.HAL_I2C_EV_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_I2C_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_i2c.o(i.HAL_I2C_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TreatErrorCallback
</UL>

<P><STRONG><a name="[85]"></a>HAL_I2C_Init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32g0xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_I2C_ListenCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_i2c.o(i.HAL_I2C_ListenCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
</UL>

<P><STRONG><a name="[82]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, iic_slave.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[86]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, iic_slave.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[d7]"></a>HAL_I2C_SlaveRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_i2c.o(i.HAL_I2C_SlaveRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[d6]"></a>HAL_I2C_SlaveTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_i2c.o(i.HAL_I2C_SlaveTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[8a]"></a>HAL_IWDG_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32g0xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[dc]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g0xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>

<P><STRONG><a name="[ef]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5c]"></a>HAL_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32g0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[8b]"></a>HAL_InitTick</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32g0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[7e]"></a>HAL_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal.o(i.HAL_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[8c]"></a>HAL_MspInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32g0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9c]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>

<P><STRONG><a name="[87]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_DeInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_GPIOSet
</UL>

<P><STRONG><a name="[89]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32g0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_GPIOSet
</UL>

<P><STRONG><a name="[8f]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32g0xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PWREx_ControlVoltageScaling &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[90]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, stm32g0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[91]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, stm32g0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[93]"></a>HAL_RCC_DeInit</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, stm32g0xx_hal_rcc.o(i.HAL_RCC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_DeInit &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_application
</UL>

<P><STRONG><a name="[95]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[94]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32g0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[92]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32g0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[96]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1082 bytes, Stack size 32 bytes, stm32g0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[8d]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32g0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a8]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32g0xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[97]"></a>HAL_TIM_Base_DeInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(i.HAL_TIM_Base_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_DeInit &rArr; HAL_TIM_Base_MspDeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[99]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[98]"></a>HAL_TIM_Base_MspDeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer.o(i.HAL_TIM_Base_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspDeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>

<P><STRONG><a name="[9a]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, timer.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[e1]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[9d]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, stm32g0xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart_ex.o(i.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32g0xx_hal_uart_ex.o(i.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart_ex.o(i.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>HAL_UART_DeInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[b2]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[af]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 602 bytes, Stack size 24 bytes, stm32g0xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[ae]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[ba]"></a>HAL_UART_MspInit</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_UART_Transmit</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, stm32g0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[f3]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, iic_slave.o(i.I2C1_ER_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 256 bytes, Stack size 20 bytes, iic_slave.o(i.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C1_EV_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[21]"></a>I2C1_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, iic_slave.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C1_IRQHandler &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C_Cont_Write</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, iic_master.o(i.I2C_Cont_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_Cont_Write &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcdc_otg_voltage_06
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcdc_otg_option3_start_35
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcdc_otg_current_08
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcdc_input_current_0e
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcdc_data
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dcdc_current_02
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_FaultHandle
</UL>

<P><STRONG><a name="[c7]"></a>I2C_HostRead</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, iic_master.o(i.I2C_HostRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_HostRead &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostWriteByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostSendAck
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostReadByte
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_otg_voltage
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_otg_current
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_max_charge_voltage
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_input_voltage
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_input_current
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_chargecurrent
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_charge_status2
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_charge_status1
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_charge_option2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_charge_option1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_charge_option0
</UL>

<P><STRONG><a name="[c8]"></a>I2C_HostReadByte</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, iic_master.o(i.I2C_HostReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_HostReadByte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
</UL>

<P><STRONG><a name="[cc]"></a>I2C_HostReceiveAck</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, iic_master.o(i.I2C_HostReceiveAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostWriteByte
</UL>

<P><STRONG><a name="[c9]"></a>I2C_HostSendAck</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iic_master.o(i.I2C_HostSendAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_HostSendAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
</UL>

<P><STRONG><a name="[c4]"></a>I2C_HostWriteByte</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, iic_master.o(i.I2C_HostWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostReceiveAck
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cont_Write
</UL>

<P><STRONG><a name="[64]"></a>I2C_Init</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, iic_master.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c3]"></a>I2C_Start</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, iic_master.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cont_Write
</UL>

<P><STRONG><a name="[c5]"></a>I2C_Stop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, iic_master.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cont_Write
</UL>

<P><STRONG><a name="[db]"></a>IIC_DeInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iic_slave.o(i.IIC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_DeInit &rArr; HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_application
</UL>

<P><STRONG><a name="[4c]"></a>IWDG_Feed</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, iwdg.o(i.IWDG_Feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_PollingTask
</UL>

<P><STRONG><a name="[5d]"></a>MX_GPIO_Init</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[5e]"></a>MX_I2C1_Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, iic_slave.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[5f]"></a>MX_IWDG_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iwdg.o(i.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[60]"></a>MX_TIM3_Init</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, timer.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[61]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[62]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>PutData2CircBuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, circularbuf.o(i.PutData2CircBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PutData2CircBuf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isFull
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_RxIrq
</UL>

<P><STRONG><a name="[e4]"></a>ReadDataFromCircBuf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, circularbuf.o(i.ReadDataFromCircBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ReadDataFromCircBuf &rArr; GetDataFrmCircBuf &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFrmCircBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromCircBuf2
</UL>

<P><STRONG><a name="[e5]"></a>ReadDataFromCircBuf2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, circularbuf.o(i.ReadDataFromCircBuf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ReadDataFromCircBuf2 &rArr; ReadDataFromCircBuf &rArr; GetDataFrmCircBuf &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromCircBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_from_circ_buf
</UL>

<P><STRONG><a name="[77]"></a>Read_BQ40Z50_ManuFBAccess_data</STRONG> (Thumb, 338 bytes, Stack size 72 bytes, smbus.o(i.Read_BQ40Z50_ManuFBAccess_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Read_BQ40Z50_ManuFBAccess_data &rArr; SMB_HostReadByte &rArr; SMB_ACK &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_Wait_Ack
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_Stop
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_Start
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_HostWriteByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_HostReadByte
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_DataUpdate
</UL>

<P><STRONG><a name="[76]"></a>Read_bq40z50_data</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, smbus.o(i.Read_bq40z50_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Read_bq40z50_data &rArr; SMB_HostReadByte &rArr; SMB_ACK &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_Wait_Ack
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_Stop
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_Start
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_HostWriteByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_HostReadByte
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_DataUpdate
</UL>

<P><STRONG><a name="[ed]"></a>SMB_ACK</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, smbus.o(i.SMB_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SMB_ACK &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_HostReadByte
</UL>

<P><STRONG><a name="[eb]"></a>SMB_HostReadByte</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, smbus.o(i.SMB_HostReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SMB_HostReadByte &rArr; SMB_ACK &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_ACK
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_bq40z50_data
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BQ40Z50_ManuFBAccess_data
</UL>

<P><STRONG><a name="[e8]"></a>SMB_HostWriteByte</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, smbus.o(i.SMB_HostWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SMB_HostWriteByte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_bq40z50_data
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BQ40Z50_ManuFBAccess_data
</UL>

<P><STRONG><a name="[e7]"></a>SMB_Start</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, smbus.o(i.SMB_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SMB_Start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_bq40z50_data
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BQ40Z50_ManuFBAccess_data
</UL>

<P><STRONG><a name="[ea]"></a>SMB_Stop</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, smbus.o(i.SMB_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SMB_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_bq40z50_data
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BQ40Z50_ManuFBAccess_data
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_Wait_Ack
</UL>

<P><STRONG><a name="[e9]"></a>SMB_Wait_Ack</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, smbus.o(i.SMB_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SMB_Wait_Ack &rArr; SMB_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_Stop
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_bq40z50_data
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BQ40Z50_ManuFBAccess_data
</UL>

<P><STRONG><a name="[65]"></a>SMBus_Init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, smbus.o(i.SMBus_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SMBus_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32g0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SystemClock_Config</STRONG> (Thumb, 128 bytes, Stack size 120 bytes, bsp.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[29]"></a>SystemInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, system_stm32g0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32g0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[f0]"></a>TIM_DeInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_DeInit &rArr; HAL_TIM_Base_DeInit &rArr; HAL_TIM_Base_MspDeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_application
</UL>

<P><STRONG><a name="[9e]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[4e]"></a>TMR0_Delay</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, timer.o(i.TMR0_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR0_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_UpdateData
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_DataUpdate
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_CommTask
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_Disply
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_SetSafetyStatus
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_LowPowerMode
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_GaugeInfoUpdate
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_FullChargeCap
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_FaultHandle
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DCDCInfoUpdate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DCDCCharge
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_ClearSafetyStatus
</UL>

<P><STRONG><a name="[bc]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[bd]"></a>UART_CheckIdleState</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stm32g0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f2]"></a>UART_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usart.o(i.UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_DeInit &rArr; HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_application
</UL>

<P><STRONG><a name="[bb]"></a>UART_SetConfig</STRONG> (Thumb, 562 bytes, Stack size 24 bytes, stm32g0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[bf]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, stm32g0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[25]"></a>USART1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_RxIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g031xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>Usart1_RxHandle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cir_handle.o(i.Usart1_RxHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = Usart1_RxHandle &rArr; circ_usart1_rx_data_handle &rArr; read_data_from_circ_buf &rArr; ReadDataFromCircBuf2 &rArr; ReadDataFromCircBuf &rArr; GetDataFrmCircBuf &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_usart1_rx_data_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_PollingTask
</UL>

<P><STRONG><a name="[f4]"></a>Usart1_RxIrq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cir_handle.o(i.Usart1_RxIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Usart1_RxIrq &rArr; PutData2CircBuf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutData2CircBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>WakeUp_GPIOSet</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, gpio.o(i.WakeUp_GPIOSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WakeUp_GPIOSet &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_LowPowerMode
</UL>

<P><STRONG><a name="[f6]"></a>__0printf$2</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf2.o(i.__0printf$2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[114]"></a>__1printf$2</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf2.o(i.__0printf$2), UNUSED)

<P><STRONG><a name="[ca]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf2.o(i.__0printf$2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_Wait_Ack
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostReceiveAck
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_usart1_rx_data_handle
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutData2CircBuf
</UL>

<P><STRONG><a name="[53]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g0xx_hal_dma.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_DataUpdate
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_Disply
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_Display
</UL>

<P><STRONG><a name="[115]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[116]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[117]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[e6]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bsp.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_bq40z50_data
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BQ40Z50_ManuFBAccess_data
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_usart1_rx_data_handle
</UL>

<P><STRONG><a name="[cb]"></a>delay_us</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bsp.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_Wait_Ack
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_Stop
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_Start
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_HostWriteByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_HostReadByte
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMB_ACK
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostWriteByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostSendAck
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostReceiveAck
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostReadByte
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[2e]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf2.o(i.__0printf$2)
</UL>
<P><STRONG><a name="[7a]"></a>isEmpty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, circularbuf.o(i.isEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_usart1_rx_data_handle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFrmCircBuf
</UL>

<P><STRONG><a name="[e3]"></a>isFull</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, circularbuf.o(i.isFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = isFull &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutData2CircBuf
</UL>

<P><STRONG><a name="[f9]"></a>jump_application</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, flash.o(i.jump_application))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = jump_application &rArr; IIC_DeInit &rArr; HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_DeInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_MSP
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_usart1_rx_data_handle
</UL>

<P><STRONG><a name="[fb]"></a>led_25_50_display</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, display.o(i.led_25_50_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_25_50_display &rArr; led_erro_display
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_erro_display
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_Disply
</UL>

<P><STRONG><a name="[fd]"></a>led_50_75_display</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, display.o(i.led_50_75_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_50_75_display &rArr; led_erro_display
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_erro_display
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_Disply
</UL>

<P><STRONG><a name="[fe]"></a>led_5_25_display</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, display.o(i.led_5_25_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = led_5_25_display &rArr; led_erro_display
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_erro_display
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_Disply
</UL>

<P><STRONG><a name="[ff]"></a>led_75_100_display</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, display.o(i.led_75_100_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = led_75_100_display &rArr; led_erro_display
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_erro_display
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_Disply
</UL>

<P><STRONG><a name="[54]"></a>led_Disply</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, display.o(i.led_Disply))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = led_Disply &rArr; led_5_25_display &rArr; led_erro_display
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Delay
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_erro_display
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_SocToDisplay
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_75_100_display
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_5_25_display
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_50_75_display
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_25_50_display
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_Display
</UL>

<P><STRONG><a name="[100]"></a>led_SocToDisplay</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, display.o(i.led_SocToDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_Disply
</UL>

<P><STRONG><a name="[fc]"></a>led_erro_display</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, display.o(i.led_erro_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = led_erro_display
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_Disply
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_75_100_display
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_5_25_display
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_50_75_display
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_25_50_display
</UL>

<P><STRONG><a name="[28]"></a>main</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = main &rArr; APP_PollingTask &rArr; Usart1_RxHandle &rArr; circ_usart1_rx_data_handle &rArr; read_data_from_circ_buf &rArr; ReadDataFromCircBuf2 &rArr; ReadDataFromCircBuf &rArr; GetDataFrmCircBuf &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Delay
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_PollingTask
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f8]"></a>read_data_from_circ_buf</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, circularbuf.o(i.read_data_from_circ_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = read_data_from_circ_buf &rArr; ReadDataFromCircBuf2 &rArr; ReadDataFromCircBuf &rArr; GetDataFrmCircBuf &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromCircBuf2
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_usart1_rx_data_handle
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3f]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal_adc.o(i.LL_ADC_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[39]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal_adc.o(i.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[8e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[2c]"></a>I2C_DMAAbort</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32g0xx_hal_i2c.o(i.I2C_DMAAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_DMAAbort &rArr; I2C_TreatErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TreatErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_i2c.o(i.I2C_ITError)
</UL>
<P><STRONG><a name="[ce]"></a>I2C_Disable_IRQ</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32g0xx_hal_i2c.o(i.I2C_Disable_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
</UL>

<P><STRONG><a name="[d4]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32g0xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[cd]"></a>I2C_ITAddrCplt</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, stm32g0xx_hal_i2c.o(i.I2C_ITAddrCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_ITAddrCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[84]"></a>I2C_ITError</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, stm32g0xx_hal_i2c.o(i.I2C_ITError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetState
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TreatErrorCallback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[d1]"></a>I2C_ITListenCplt</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32g0xx_hal_i2c.o(i.I2C_ITListenCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_ITListenCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[d3]"></a>I2C_ITSlaveCplt</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, stm32g0xx_hal_i2c.o(i.I2C_ITSlaveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[d5]"></a>I2C_ITSlaveSeqCplt</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32g0xx_hal_i2c.o(i.I2C_ITSlaveSeqCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_ITSlaveSeqCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[2d]"></a>I2C_Slave_ISR_IT</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, stm32g0xx_hal_i2c.o(i.I2C_Slave_ISR_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_Slave_ISR_IT &rArr; I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_i2c.o(i.I2C_ITError)
</UL>
<P><STRONG><a name="[c6]"></a>I2C_TreatErrorCallback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32g0xx_hal_i2c.o(i.I2C_TreatErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_TreatErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[a0]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[9f]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[a1]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32g0xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[2b]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[b0]"></a>UART_EndRxTransfer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32g0xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32g0xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, stm32g0xx_hal_uart_ex.o(i.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UARTEx_SetNbDataToProcess &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[75]"></a>GAUGE_DataUpdate</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, gauge_pro.o(i.GAUGE_DataUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GAUGE_DataUpdate &rArr; Read_BQ40Z50_ManuFBAccess_data &rArr; SMB_HostReadByte &rArr; SMB_ACK &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Delay
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_bq40z50_data
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BQ40Z50_ManuFBAccess_data
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_CommTask
</UL>

<P><STRONG><a name="[66]"></a>DCDC_FaultHandle</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dcdc_pro.o(i.DCDC_FaultHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DCDC_FaultHandle &rArr; I2C_Cont_Write &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cont_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_CommTask
</UL>

<P><STRONG><a name="[67]"></a>DCDC_UpdateData</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, dcdc_pro.o(i.DCDC_UpdateData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DCDC_UpdateData &rArr; read_dcdc_otg_voltage &rArr; I2C_HostRead &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Delay
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_otg_voltage
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_otg_current
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_max_charge_voltage
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_input_voltage
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_input_current
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_chargecurrent
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_charge_status2
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_charge_status1
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_charge_option2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_charge_option1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dcdc_charge_option0
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_CommTask
</UL>

<P><STRONG><a name="[6e]"></a>read_dcdc_charge_option0</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dcdc_pro.o(i.read_dcdc_charge_option0))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_dcdc_charge_option0 &rArr; I2C_HostRead &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_UpdateData
</UL>

<P><STRONG><a name="[6c]"></a>read_dcdc_charge_option1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dcdc_pro.o(i.read_dcdc_charge_option1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_dcdc_charge_option1 &rArr; I2C_HostRead &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_UpdateData
</UL>

<P><STRONG><a name="[6d]"></a>read_dcdc_charge_option2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dcdc_pro.o(i.read_dcdc_charge_option2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_dcdc_charge_option2 &rArr; I2C_HostRead &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_UpdateData
</UL>

<P><STRONG><a name="[6f]"></a>read_dcdc_charge_status1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dcdc_pro.o(i.read_dcdc_charge_status1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_dcdc_charge_status1 &rArr; I2C_HostRead &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_UpdateData
</UL>

<P><STRONG><a name="[70]"></a>read_dcdc_charge_status2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dcdc_pro.o(i.read_dcdc_charge_status2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_dcdc_charge_status2 &rArr; I2C_HostRead &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_UpdateData
</UL>

<P><STRONG><a name="[69]"></a>read_dcdc_chargecurrent</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dcdc_pro.o(i.read_dcdc_chargecurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_dcdc_chargecurrent &rArr; I2C_HostRead &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_UpdateData
</UL>

<P><STRONG><a name="[73]"></a>read_dcdc_input_current</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dcdc_pro.o(i.read_dcdc_input_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_dcdc_input_current &rArr; I2C_HostRead &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_UpdateData
</UL>

<P><STRONG><a name="[6a]"></a>read_dcdc_input_voltage</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dcdc_pro.o(i.read_dcdc_input_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_dcdc_input_voltage &rArr; I2C_HostRead &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_UpdateData
</UL>

<P><STRONG><a name="[6b]"></a>read_dcdc_max_charge_voltage</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dcdc_pro.o(i.read_dcdc_max_charge_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_dcdc_max_charge_voltage &rArr; I2C_HostRead &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_UpdateData
</UL>

<P><STRONG><a name="[71]"></a>read_dcdc_otg_current</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dcdc_pro.o(i.read_dcdc_otg_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_dcdc_otg_current &rArr; I2C_HostRead &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_UpdateData
</UL>

<P><STRONG><a name="[72]"></a>read_dcdc_otg_voltage</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dcdc_pro.o(i.read_dcdc_otg_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_dcdc_otg_voltage &rArr; I2C_HostRead &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_HostRead
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_UpdateData
</UL>

<P><STRONG><a name="[1]"></a>set_dcdc_current_02</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dcdc_pro.o(i.set_dcdc_current_02))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_dcdc_current_02 &rArr; I2C_Cont_Write &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cont_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcdc_pro.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>set_dcdc_data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dcdc_pro.o(i.set_dcdc_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_dcdc_data &rArr; I2C_Cont_Write &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cont_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcdc_pro.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>set_dcdc_input_current_0e</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dcdc_pro.o(i.set_dcdc_input_current_0e))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_dcdc_input_current_0e &rArr; I2C_Cont_Write &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cont_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcdc_pro.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>set_dcdc_otg_current_08</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dcdc_pro.o(i.set_dcdc_otg_current_08))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_dcdc_otg_current_08 &rArr; I2C_Cont_Write &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cont_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcdc_pro.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>set_dcdc_otg_option3_start_35</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, dcdc_pro.o(i.set_dcdc_otg_option3_start_35))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_dcdc_otg_option3_start_35 &rArr; I2C_Cont_Write &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cont_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcdc_pro.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>set_dcdc_otg_voltage_06</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dcdc_pro.o(i.set_dcdc_otg_voltage_06))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_dcdc_otg_voltage_06 &rArr; I2C_Cont_Write &rArr; I2C_HostWriteByte &rArr; I2C_HostReceiveAck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cont_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcdc_pro.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>BMS_ClearSafetyStatus</STRONG> (Thumb, 740 bytes, Stack size 24 bytes, bms_pro.o(i.BMS_ClearSafetyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BMS_ClearSafetyStatus &rArr; TMR0_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_FaultHandle
</UL>

<P><STRONG><a name="[4f]"></a>BMS_DCDCCharge</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, bms_pro.o(i.BMS_DCDCCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BMS_DCDCCharge &rArr; TMR0_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Delay
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_ProTask
</UL>

<P><STRONG><a name="[51]"></a>BMS_DCDCInfoUpdate</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, bms_pro.o(i.BMS_DCDCInfoUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BMS_DCDCInfoUpdate &rArr; TMR0_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_ProTask
</UL>

<P><STRONG><a name="[52]"></a>BMS_Display</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bms_pro.o(i.BMS_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BMS_Display &rArr; led_Disply &rArr; led_5_25_display &rArr; led_erro_display
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_Disply
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_ProTask
</UL>

<P><STRONG><a name="[55]"></a>BMS_FaultHandle</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, bms_pro.o(i.BMS_FaultHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BMS_FaultHandle &rArr; BMS_SetSafetyStatus &rArr; TMR0_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Delay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_SetSafetyStatus
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_ClearSafetyStatus
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_ProTask
</UL>

<P><STRONG><a name="[57]"></a>BMS_FullChargeCap</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, bms_pro.o(i.BMS_FullChargeCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BMS_FullChargeCap &rArr; TMR0_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Delay
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_ProTask
</UL>

<P><STRONG><a name="[58]"></a>BMS_GaugeInfoUpdate</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bms_pro.o(i.BMS_GaugeInfoUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BMS_GaugeInfoUpdate &rArr; TMR0_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Delay
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_ProTask
</UL>

<P><STRONG><a name="[5a]"></a>BMS_LowPowerMode</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bms_pro.o(i.BMS_LowPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BMS_LowPowerMode &rArr; WakeUp_GPIOSet &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUp_GPIOSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_ProTask
</UL>

<P><STRONG><a name="[56]"></a>BMS_SetSafetyStatus</STRONG> (Thumb, 736 bytes, Stack size 24 bytes, bms_pro.o(i.BMS_SetSafetyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BMS_SetSafetyStatus &rArr; TMR0_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_FaultHandle
</UL>

<P><STRONG><a name="[f5]"></a>circ_usart1_rx_data_handle</STRONG> (Thumb, 192 bytes, Stack size 272 bytes, cir_handle.o(i.circ_usart1_rx_data_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = circ_usart1_rx_data_handle &rArr; read_data_from_circ_buf &rArr; ReadDataFromCircBuf2 &rArr; ReadDataFromCircBuf &rArr; GetDataFrmCircBuf &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_application
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_from_circ_buf
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_RxHandle
</UL>

<P><STRONG><a name="[f7]"></a>_printf_core</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, printf2.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$2
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
